package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal BREAK, READ, TERNARY_IF, TERNARY_ELSE, DO,WHILE, EXTENDS, AND, OR,ASSIGN, NOTEQUAL,GREATER, GREATER_EQUAL, LOWER, LOWER_EQUAL, SAME, NOT_SAME, CONTINUE,  CLASS, ELSE, IF, PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, EQUAL, VOID, CONST, ENUM, INCREMENT, DECREMENT, LBRACKET, RBRACKET, PLUS, MINUS, MOD, DIV, MUL, POINT, NEW;
terminal Integer NUMBER;
terminal Boolean BOOLEAN;
terminal Character CHAR;
terminal String IDENT;

nonterminal SymbolDecl, VarDeclList, VarDecls,  ConstDeclList, VarDeclItem, VarDeclItems;
nonterminal MethodDeclList;
nonterminal StatementList, Statement;
nonterminal Addop, Mulop;
nonterminal EnumFieldList, EnumField;
nonterminal ArrayDesignator;
nonterminal ErrorNonTerm;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName, ConstDeclItem, EnumDeclItem, EnumDesignatorFactorItem;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr,Expr1, Factor, TypeLiteral, SymbolDeclList;

Program ::= (Program) PROG ProgName:p  SymbolDeclList LBRACE MethodDeclList RBRACE
		  ;

ProgName ::= (ProgName) IDENT:pName
			;

SymbolDeclList ::= (SymbolDeclarations) SymbolDeclList SymbolDecl
				|
				(NoSymbolDeclarations)/* epsilon */
				;

SymbolDecl ::= (VarDecl) VarDeclItems
			|
			(ConstDecl) CONST Type ConstDeclList SEMI
			|
			(EnumDecl) EnumDeclItem
			;

ErrorNonTerm ::= (ErrorNonTerm) error
				{: parser.log.debug("Uspesan oporavak od greske pri deklaraciji promenljive."); :};

VarDeclItems::= (NoErrVarDeclItems) Type VarDeclList SEMI
			|
			(ErrVarDeclItems) ErrorNonTerm SEMI
			;

VarDecls ::= (VarDeclarationItems) VarDecls VarDeclItems
			|
			(NoVarDeclarationItems)
			;

EnumDeclItem ::= (EnumDeclItem) ENUM IDENT:name LBRACE EnumFieldList RBRACE
			  ;

ConstDeclList ::= (ConstDeclarations) ConstDeclList COMMA ConstDeclItem
			 |
			 (SingleConstDeclaration) ConstDeclItem
			 ;

ConstDeclItem ::=  (ConstDeclItem) IDENT:name EQUAL TypeLiteral
				;

VarDeclList ::= (VarDeclarations)  VarDeclList COMMA VarDeclItem
			 |
			 (SingleVarDeclaration)  VarDeclItem
			;

VarDeclItem ::=  (SimpleVarDeclItem) IDENT:varName
		  |
		  (ArrayVarDeclItem) IDENT:varName LBRACKET RBRACKET
		  |
		  (Err1VarDeclItem) error
		  {: parser.log.debug("Uspesan oporavak od greske pri deklaraciji promenljive."); :}
		  ;

TypeLiteral ::= (NumberLiteral) NUMBER:value
			|
			(CharLiteral) CHAR:value
			|
			(BoolLiteral) BOOLEAN:value
			;

EnumFieldList ::= (EnumFields) EnumFieldList COMMA EnumField
				|
				(SingleEnumField) EnumField
				;

EnumField ::= (EnumFieldWithInit) IDENT:name EQUAL NUMBER
			|
			(EnumFieldWithoutInit) IDENT:name
			;

Type ::= (Type) IDENT:typeName
	   ;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(MethodDeclaration) MethodDecl
				;

MethodDecl ::= (MethodDecl) MethodTypeName
			   LPAREN RPAREN VarDecls LBRACE StatementList RBRACE
			   ;

MethodTypeName ::= (MethodTypeName) VOID:type IDENT:name
				 ;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStatements) /* epsilon */
				;


Statement ::= (AssignmentStmt) Designator EQUAL Expr1 SEMI
			|
			(ErrAssignmentStmt) Designator EQUAL error SEMI
			{: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :}
			|
			(IncrementStmt) Designator INCREMENT SEMI
			|
			(DecrementStmt) Designator DECREMENT SEMI
			|
			(PrintStmt) PRINT LPAREN Expr1 RPAREN SEMI
			|
			(PrintStmtOptional) PRINT LPAREN Expr1 COMMA NUMBER:number RPAREN SEMI
			|
			(ReadStmt) READ LPAREN Designator RPAREN SEMI
			;

Expr1 ::= (TernaryExpr) Expr:condExpr TERNARY_IF Expr:truthyExpr TERNARY_ELSE Expr:falsyExpr
		|
		(RegularExpr) Expr:expr
		;

Expr ::= (AddExpr) Expr Addop Term
		|
		(TermExpr) Term
		|
		(NegTermExpr) MINUS Term
		;

Term ::= (MulExprTerm) Term Mulop Factor
		|
		(FactorTerm) Factor
		;

Factor ::= (LiteralFactor) TypeLiteral
		|
		(BracketExprFactor) LPAREN Expr1 RPAREN
		|
		(AllocStructFactor) NEW Type
		|
		(AllocArrayFactor) NEW Type LBRACKET Expr1 RBRACKET
		|
		(EnumDesignatorFactor) EnumDesignatorFactorItem
		|
		(DesignatorFactor) Designator
		;

EnumDesignatorFactorItem ::= (EnumDesignatorFactorItem) IDENT:name POINT IDENT:field
						;

Designator ::= (NameDesignator) IDENT:name
			|
			(ArrayFieldDesignator) ArrayDesignator LBRACKET Expr1 RBRACKET
			;

ArrayDesignator::= (NameArrayDesignator) IDENT:name
				;

Addop ::= (PlusAddop) PLUS
		|
		(MinusAddop) MINUS
		;

Mulop ::= (MulMulop) MUL
		|
		(DivMulop) DIV
		|
		(ModMulop) MOD
		;
